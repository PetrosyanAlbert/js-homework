class Product {
    constructor(name, price, description) {
        if (new.target === Product) {
            throw new Error("Error111 - –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ Product");
        }
        this.name = name;
        this.price = price;
        this.description = description;
    }

    getDetails() {
        throw new Error("Error222 - –ú–µ—Ç–æ–¥ getDetails –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ");
    }
}

class ElectronicsProduct extends Product {
    constructor(name, price, description, warrantyPeriod, brand) {
        super(name, price, description);
        this.warrantyPeriod = warrantyPeriod;
        this.brand = brand;
    }

    getDetails() {
        return `${this.name}: ${this.description}. –¶–µ–Ω–∞: ${this.price} USD. –ë—Ä–µ–Ω–¥: ${this.brand}. –ì–∞—Ä–∞–Ω—Ç–∏—è: ${this.warrantyPeriod} –ª–µ—Ç.`;
    }
}

class ClothingProduct extends Product {
    constructor(name, price, description, size, material, gender) {
        super(name, price, description);
        this.size = size;
        this.material = material;
        this.gender = gender;
    }

    getDetails() {
        return `${this.name}: ${this.description}. –¶–µ–Ω–∞: ${this.price} USD. –†–∞–∑–º–µ—Ä: ${this.size}, –ú–∞—Ç–µ—Ä–∏–∞–ª: ${this.material}, –ü–æ–ª: ${this.gender}.`;
    }
}


class Review {
    constructor(product, rating, comment, customer) {
        this.product = product;
        this.rating = rating;
        this.comment = comment;
        this.customer = customer;
        this.date = new Date();
    }

    getSummary() {
        return `${this.rating} –æ—Ç ${this.customer.name}: ${this.comment}`;
    }
}


class ReviewManager {
    constructor() {
        this.reviews = [];
    }

    addReview(product, rating, comment, customer) {
        const review = new Review(product, rating, comment, customer);
        this.reviews.push(review);
        console.log(`‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω: ${review.getSummary()}`);
    }

    getReviewsByProduct(product) {
        return this.reviews.filter(review => review.product === product);
    }

    getAverageRating(product) {
        const productReviews = this.getReviewsByProduct(product);
        if (productReviews.length === 0) return null;

        const total = productReviews.reduce((sum, r) => sum + r.rating, 0);
        return (total / productReviews.length).toFixed(1);
    }
}


let orderCounter = 1;

class Order {
    constructor(customer, products) {
        if (new.target === Order) {
            throw new Error("Error111 - –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ Order");
        }
        this.orderId = orderCounter++;
        this.customer = customer;
        this.products = products;
        this.createdAt = new Date();
        this.status = "–û–∂–∏–¥–∞–µ—Ç";
        this.totalPrice = 0;
    }

    calculateTotalPrice() {
        throw new Error("Error222 - –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ");
    }

    processPayment() {
        throw new Error("Error333 - –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ");
    }
}

class OnlineOrder extends Order {
    constructor(customer, products) {
        super(customer, products);
        this.totalPrice = this.calculateTotalPrice();
    }

   calculateTotalPrice() {
        let total = 0;
        for (let i = 0; i < this.products.length; i++) {
            total += this.products[i].price;
        }
        return total;
    }

    processPayment() {
        console.log(`üí≥ –û–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${this.orderId} –Ω–∞ —Å—É–º–º—É $${this.totalPrice}`);
        this.status = "–í—ã–ø–æ–ª–Ω–µ–Ω";
    }
}


class Customer {
    constructor(name, email) {
        this.name = name;
        this.email = email;
        this.orderHistory = [];
        this.reviews = []; 
    }

    searchProducts(keyword, productCatalog) {
        return productCatalog.filter(p =>
            p.name.includes(keyword) || p.description.includes(keyword)
        );
    }

    placeOrder(productsArray) {
        const order = new OnlineOrder(this,productsArray);
        order.processPayment();
        this.orderHistory.push(order);
        return order;
    }

    viewOrderHistory() {
        if (this.orderHistory.length === 0) {
            console.log("‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
            return;
        }
        this.orderHistory.forEach(order => {
            console.log(`üõí –ó–∞–∫–∞–∑ #${order.orderId} (${order.status}) –Ω–∞ —Å—É–º–º—É $${order.totalPrice} ‚Äî ${order.createdAt.toLocaleDateString()}`);
        });
    }

    leaveReview(product, rating, comment, reviewManager) {
        reviewManager.addReview(product, rating, comment, this);
    }
}



const catalog = [
    new ElectronicsProduct("–ù–æ—É—Ç–±—É–∫", 1200, "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∏–≥—Ä", 2, "Dell"),
    new ClothingProduct("–§—É—Ç–±–æ–ª–∫–∞", 25, "–£–¥–æ–±–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞", "M", "–•–ª–æ–ø–æ–∫", "–ú—É–∂—Å–∫–æ–π")
];

const reviewManager = new ReviewManager();
const customer = new Customer("–ê–ª–µ–∫—Å–µ–π", "alex@example.com");

console.log("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á—É '–Ω–æ—É—Ç':");
const found = customer.searchProducts("–Ω–æ—É—Ç", catalog);
found.forEach(p => console.log(p.getDetails()));

console.log("\nüì¶ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:");
const order = customer.placeOrder(found);
customer.viewOrderHistory();

console.log("\n‚úçÔ∏è –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã:");
customer.leaveReview(found[0], 5, "–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π!", reviewManager);
customer.leaveReview(found[0], 4, "–†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.", reviewManager);

console.log("\nüîé –û—Ç–∑—ã–≤—ã –Ω–∞ —Ç–æ–≤–∞—Ä:");
const reviews = reviewManager.getReviewsByProduct(found[0]);
reviews.forEach(r => console.log(r.getSummary()));

console.log(`‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${reviewManager.getAverageRating(found[0])}‚òÖ`);
