// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Game
class Game {
    constructor(title, genre, releaseDate, developer, publisher) {
        this.title = title;
        this.genre = genre;
        this.releaseDate = releaseDate;
        this.developer = developer;
        this.publisher = publisher;
    }

    getInfo() {
        return `üéÆ ${this.title} (${this.genre}) ‚Äî –†–µ–ª–∏–∑: ${this.releaseDate}.
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${this.developer.name}, –ò–∑–¥–∞—Ç–µ–ª—å: ${this.publisher ? this.publisher.name : "‚Äî"}`;
    }
}

// –ü–æ–¥–∫–ª–∞—Å—Å ActionGame
class ActionGame extends Game {
    constructor(title, genre, releaseDate, developer, publisher, violenceLevel = "Medium", isMultiplayer = true) {
        super(title, genre, releaseDate, developer, publisher);
        this.violenceLevel = violenceLevel;
        this.isMultiplayer = isMultiplayer;
    }

    getInfo() {
        return `üéÆ ${this.title} [Action] ‚Äî –ñ–∞–Ω—Ä: ${this.genre}, –†–µ–ª–∏–∑: ${this.releaseDate}.
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${this.developer.name}, –ò–∑–¥–∞—Ç–µ–ª—å: ${this.publisher ? this.publisher.name : "‚Äî"}.
–ù–∞—Å–∏–ª–∏–µ: ${this.violenceLevel}, –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä: ${this.isMultiplayer ? "–î–∞" : "–ù–µ—Ç"}`;
    }
}

// –ü–æ–¥–∫–ª–∞—Å—Å StrategyGame
class StrategyGame extends Game {
    constructor(title, genre, releaseDate, developer, publisher, mapType = "Square", turnBased = true) {
        super(title, genre, releaseDate, developer, publisher);
        this.mapType = mapType;
        this.turnBased = turnBased;
    }

    getInfo() {
        return `üéÆ ${this.title} [Strategy] ‚Äî –ñ–∞–Ω—Ä: ${this.genre}, –†–µ–ª–∏–∑: ${this.releaseDate}.
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${this.developer.name}, –ò–∑–¥–∞—Ç–µ–ª—å: ${this.publisher ? this.publisher.name : "‚Äî"}.
–ö–∞—Ä—Ç–∞: ${this.mapType}, –ü–æ—à–∞–≥–æ–≤–∞—è: ${this.turnBased ? "–î–∞" : "–ù–µ—Ç"}`;
    }
}

// –ö–ª–∞—Å—Å Developer
class Developer {
    constructor(name, email) {
        this.name = name;
        this.email = email;
        this.gamesDeveloped = [];
    }

    createGame(title, genre, releaseDate, type, publisher = null) {
        let game;
        if (type === "ActionGame") {
            game = new ActionGame(title, genre, releaseDate, this, publisher);
        } else if (type === "StrategyGame") {
            game = new StrategyGame(title, genre, releaseDate, this, publisher);
        } else {
            throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–≥—Ä—ã.");
        }

        this.gamesDeveloped.push(game);
        return game;
    }

    listGames() {
        return this.gamesDeveloped.map(game => game.title);
    }

    updateGameTitle(game, newTitle) {
        if (this.gamesDeveloped.includes(game)) {
            game.title = newTitle;
            console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${newTitle}"`);
        }
    }
}

// –ö–ª–∞—Å—Å Publisher
class Publisher {
    constructor(name, email) {
        this.name = name;
        this.email = email;
        this.gamesPublished = [];
        this.count = new Map();
    }

    publishGame(game) {
        game.publisher = this;
        this.gamesPublished.push(game);
        console.log(`üöÄ –ò–≥—Ä–∞ "${game.title}" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏–∑–¥–∞—Ç–µ–ª–µ–º ${this.name}`);
    }

    listReleases() {
        return this.gamesPublished.map(game => game.title);
    }

    trackSales(game, amount) {
        this.count.set(game, amount);
        console.log(`üìä –ü—Ä–æ–¥–∞–∂–∏ –∏–≥—Ä—ã "${game.title}" –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${amount} –∫–æ–ø–∏–π`);
    }
}

const dev = new Developer("Jane Dev", "jane@devs.com");
const pub = new Publisher("MegaPub", "contact@megapub.com");

// –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–∑–¥–∞—Ç–µ–ª—è)
const game = dev.createGame("BattleZone", "Action", "2025-01-01", "ActionGame");

// –ò–∑–¥–∞—Ç–µ–ª—å –ø—É–±–ª–∏–∫—É–µ—Ç –∏–≥—Ä—É
pub.publishGame(game);

// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
console.log(game.getInfo());
